{
  "version": 3,
  "sources": ["../node_modules/es5-ext/global.js", "../node_modules/websocket/lib/version.js", "../node_modules/websocket/lib/browser.js", "../src/BCI2K_OperatorConnection.ts", "../src/BCI2K_DataConnection.ts"],
  "sourcesContent": ["var naiveFallback = function () {\n\tif (typeof self === \"object\" && self) return self;\n\tif (typeof window === \"object\" && window) return window;\n\tthrow new Error(\"Unable to resolve global `this`\");\n};\n\nmodule.exports = (function () {\n\tif (this) return this;\n\n\t// Unexpected strict mode (may happen if e.g. bundled into ESM module)\n\n\t// Fallback to standard globalThis if available\n\tif (typeof globalThis === \"object\" && globalThis) return globalThis;\n\n\t// Thanks @mathiasbynens -> https://mathiasbynens.be/notes/globalthis\n\t// In all ES5+ engines global object inherits from Object.prototype\n\t// (if you approached one that doesn't please report)\n\ttry {\n\t\tObject.defineProperty(Object.prototype, \"__global__\", {\n\t\t\tget: function () { return this; },\n\t\t\tconfigurable: true\n\t\t});\n\t} catch (error) {\n\t\t// Unfortunate case of updates to Object.prototype being restricted\n\t\t// via preventExtensions, seal or freeze\n\t\treturn naiveFallback();\n\t}\n\ttry {\n\t\t// Safari case (window.__global__ works, but __global__ does not)\n\t\tif (!__global__) return naiveFallback();\n\t\treturn __global__;\n\t} finally {\n\t\tdelete Object.prototype.__global__;\n\t}\n})();\n", "module.exports = require('../package.json').version;\n", "var _globalThis;\nif (typeof globalThis === 'object') {\n\t_globalThis = globalThis;\n} else {\n\ttry {\n\t\t_globalThis = require('es5-ext/global');\n\t} catch (error) {\n\t} finally {\n\t\tif (!_globalThis && typeof window !== 'undefined') { _globalThis = window; }\n\t\tif (!_globalThis) { throw new Error('Could not determine global this'); }\n\t}\n}\n\nvar NativeWebSocket = _globalThis.WebSocket || _globalThis.MozWebSocket;\nvar websocket_version = require('./version');\n\n\n/**\n * Expose a W3C WebSocket class with just one or two arguments.\n */\nfunction W3CWebSocket(uri, protocols) {\n\tvar native_instance;\n\n\tif (protocols) {\n\t\tnative_instance = new NativeWebSocket(uri, protocols);\n\t}\n\telse {\n\t\tnative_instance = new NativeWebSocket(uri);\n\t}\n\n\t/**\n\t * 'native_instance' is an instance of nativeWebSocket (the browser's WebSocket\n\t * class). Since it is an Object it will be returned as it is when creating an\n\t * instance of W3CWebSocket via 'new W3CWebSocket()'.\n\t *\n\t * ECMAScript 5: http://bclary.com/2004/11/07/#a-13.2.2\n\t */\n\treturn native_instance;\n}\nif (NativeWebSocket) {\n\t['CONNECTING', 'OPEN', 'CLOSING', 'CLOSED'].forEach(function(prop) {\n\t\tObject.defineProperty(W3CWebSocket, prop, {\n\t\t\tget: function() { return NativeWebSocket[prop]; }\n\t\t});\n\t});\n}\n\n/**\n * Module exports.\n */\nmodule.exports = {\n    'w3cwebsocket' : NativeWebSocket ? W3CWebSocket : null,\n    'version'      : websocket_version\n};\n", "// ======================================================================== //\n//\n// bci2k.js\n// A javascript connector for BCI2000\n//\n// ======================================================================== //\n\nimport { w3cwebsocket as WebSocket } from \"websocket\";\n\nexport class BCI2K_OperatorConnection {\n  msgID: number;\n  websocket: any;\n  state: any;\n  ondisconnect: any;\n  onStateChange: any;\n  address: string;\n  latestIncomingData: string;\n  newData: any;\n  responseBuffer: any;\n  constructor(address?: string) {\n    this.ondisconnect = () => {};\n    this.onStateChange = (event: string) => {};\n    this.websocket = null;\n    this.state = \"\";\n    this.address = address || undefined;\n    this.latestIncomingData = \"\";\n    this.msgID = 0;\n    this.newData = () => {};\n    this.responseBuffer = [];\n  }\n\n  public connect(address?: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.address === undefined) {\n        this.address =\n          address || \"ws://127.0.0.1:80\" || `ws://${window.location.host}`;\n      }\n\n      this.websocket = new WebSocket(this.address);\n\n      this.websocket.onerror = (error) =>\n        reject(`Error connecting to BCI2000 at ${this.address}`);\n\n      this.websocket.onclose = () => {\n        console.log(\"Connection closed\");\n        this.ondisconnect();\n      };\n      this.websocket.onopen = () => resolve();\n\n\n      let parseError = false\n      this.websocket.onmessage = (event) => {\n        try {\n          let { opcode, id, response } = JSON.parse(event.data);\n          switch (opcode) {\n            case \"O\":\n              this.responseBuffer.push({ id: id, response: response });\n              this.newData(response);\n              break;\n            default:\n              break;\n          }\n        } catch (e) {\n          if (!parseError) {\n            console.log(\"Error parsing message from BCI2000\", e);\n            parseError = true\n          }\n        }\n      };\n    });\n  }\n\n  public disconnect(): void {\n    this.websocket.close();\n  }\n\n  public connected(): boolean {\n    return (\n      this.websocket !== null && this.websocket.readyState === WebSocket.OPEN\n    );\n  }\n\n  public execute(instruction: string): Promise<string> {\n    if (this.connected()) {\n      return new Promise((resolve, reject) => {\n        this.msgID = this.msgID + 1;\n        this.websocket.send(\n          JSON.stringify({\n            opcode: \"E\",\n            id: this.msgID,\n            contents: instruction,\n          })\n        );\n        this.newData = (data) => resolve(data);\n      });\n    }\n    // Cannot execute if not connected\n    return Promise.reject(\n      \"Cannot execute instruction: not connected to BCI2000\"\n    );\n  }\n\n  async getVersion(): Promise<string> {\n    let resp = await this.execute(\"Version\");\n    return resp.split(\"\\r\")[0];\n  }\n\n  async showWindow(): Promise<void> {\n    await this.execute(\"Show Window\");\n  }\n\n  async hideWindow(): Promise<void> {\n    await this.execute(\"Hide Window\");\n  }\n\n  async startExecutable(executable: string): Promise<void> {\n    await this.execute(`Start executable ${executable}`);\n  }\n\n  async startDummyRun(): Promise<void> {\n    // await this.execute('Startup system');\n    await this.startExecutable(\"SignalGenerator\");\n    await this.startExecutable(\"DummySignalProcessing\");\n    await this.startExecutable(\"DummyApplication\");\n    // await this.execute(\"Set Config\");\n    // await this.execute(\"Start\");\n  }\n\n  async setWatch(state: string, ip: string, port: string): Promise<void> {\n    await this.execute(\"Add watch \" + state + \" at \" + ip + \":\" + port);\n  }\n\n  async resetSystem(): Promise<void> {\n    await this.execute(\"Reset System\");\n  }\n\n  async setConfig(): Promise<void> {\n    await this.execute(\"Set Config\");\n  }\n\n  async start(): Promise<void> {\n    await this.execute(\"Start\");\n  }\n\n  async stop(): Promise<void> {\n    await this.execute(\"Stop\");\n  }\n\n  async kill(): Promise<void> {\n    await this.execute(\"Exit\");\n  }\n\n  stateListen(): void {\n    setInterval(async () => {\n      let state: string = await this.execute(\"GET SYSTEM STATE\");\n      if (state.trim() != this.state) {\n        this.onStateChange(state.trim());\n      }\n    }, 1000);\n  }\n\n  async getSubjectName(): Promise<string> {\n    return await this.execute(\"Get Parameter SubjectName\");\n  }\n\n  async getTaskName(): Promise<string> {\n    return await this.execute(\"Get Parameter DataFile\");\n  }\n\n  async setParameter(parameter): Promise<void> {\n    await this.execute(`Set paramater ${parameter}`);\n  }\n\n  async setState(state): Promise<void> {\n    await this.execute(`Set state ${state}`);\n  }\n\n  //See https://www.bci2000.org/mediawiki/index.php/Technical_Reference:Parameter_Definition\n  async getParameters(): Promise<any> {\n    let parameters: any = await this.execute(\"List Parameters\");\n    let allData = parameters.split(\"\\n\");\n    let data = {};\n    let el;\n    allData.forEach((line) => {\n      let descriptors = line.split(\"=\")[0];\n      let dataType = descriptors.split(\" \")[1];\n      let name = descriptors.split(\" \")[2];\n      let names = descriptors.split(\" \")[0].split(\":\");\n      names.forEach((x, i) => {\n        switch (i) {\n          case 0: {\n            if (data[names[0]] == undefined) {\n              data[names[0]] = {};\n            }\n            el = data[names[0]];\n            break;\n          }\n          case 1: {\n            if (data[names[0]][names[1]] == undefined) {\n              data[names[0]][names[1]] = {};\n            }\n            el = data[names[0]][names[1]];\n            break;\n          }\n          case 2: {\n            if (data[names[0]][names[1]][names[2]] == undefined) {\n              data[names[0]][names[1]][names[2]] = {};\n            }\n            el = data[names[0]][names[1]][names[2]];\n            break;\n          }\n          default: {\n          }\n        }\n      });\n\n      if (dataType != \"matrix\") {\n        if (line.split(\"=\")[1].split(\"//\")[0].trim().split(\" \").length == 4) {\n          el[name] = {\n            dataType,\n            value: {\n              value: line.split(\"=\")[1].split(\"//\")[0].trim().split(\" \")[0],\n              defaultValue: line\n                .split(\"=\")[1]\n                .split(\"//\")[0]\n                .trim()\n                .split(\" \")[1],\n              low: line.split(\"=\")[1].split(\"//\")[0].trim().split(\" \")[2],\n              high: line.split(\"=\")[1].split(\"//\")[0].trim().split(\" \")[3],\n            },\n            comment: line.split(\"=\")[1].split(\"//\")[1],\n          };\n        } else {\n          el[name] = {\n            dataType,\n            value: line.split(\"=\")[1].split(\"//\")[0].trim(),\n            comment: line.split(\"=\")[1].split(\"//\")[1],\n          };\n        }\n      } else {\n        el[name] = {\n          dataType,\n          value: line.split(\"=\")[1].split(\"//\")[0].trim(),\n          comment: line.split(\"=\")[1].split(\"//\")[1],\n        };\n      }\n    });\n\n    return data;\n  }\n}\n", "import { w3cwebsocket as WebSocket } from \"websocket\";\n\nexport class BCI2K_DataConnection {\n  _socket: any;\n  states: any;\n  signal: any;\n  signalProperties: any;\n  stateFormat: any;\n  stateVecOrder: any;\n  SignalType: any;\n  callingFrom: any;\n  onconnect: any;\n  onGenericSignal: any;\n  onStateVector: any;\n  onSignalProperties: any;\n  onStateFormat: any;\n  ondisconnect: any;\n  onReceiveBlock: any;\n  address: string;\n  constructor(address?: string) {\n    this._socket = null;\n    this.onconnect = () => {};\n    this.onGenericSignal = (data: any) => {};\n    this.onStateVector = (data: any) => {};\n    this.onSignalProperties = (data: any) => {};\n    this.onStateFormat = (data: any) => {};\n    this.ondisconnect = () => {};\n    this.onReceiveBlock = () => {};\n    this.callingFrom = \"\";\n    this.states = {};\n    this.signal = null;\n    this.signalProperties = null;\n    this.stateFormat = null;\n    this.stateVecOrder = null;\n    this.SignalType = {\n      INT16: 0,\n      FLOAT24: 1,\n      FLOAT32: 2,\n      INT32: 3,\n    };\n    this.address = address!;\n  }\n  private getNullTermString(dv: DataView) {\n    var val = \"\";\n    let count = 0;\n    while (count < dv.byteLength) {\n      var v = dv.getUint8(count);\n      count++;\n      if (v == 0) break;\n      val += String.fromCharCode(v);\n    }\n    return val;\n  }\n  connect(address?: string, callingFrom?: string) {\n    let connection = this;\n    if (connection.address === undefined) connection.address = address!;\n    this.callingFrom = callingFrom;\n    return new Promise<void>((resolve, reject) => {\n      connection._socket = new WebSocket(connection.address);\n      connection._socket.binaryType = \"arraybuffer\";\n      connection._socket.onerror = () => {\n        // This will only execute if we err before connecting, since\n        // Promises can only get triggered once\n        reject(\"Error connecting to data source at \" + connection.address);\n      };\n      connection._socket.onopen = () => {\n        connection.onconnect();\n        resolve();\n      };\n      connection._socket.onclose = () => {\n        connection.ondisconnect();\n        setTimeout(() => {\n          console.log(\"Disconnected\");\n          this.connect(\"\");\n        }, 1000);\n      };\n      connection._socket.onmessage = (event: { data: ArrayBuffer }) => {\n        connection._decodeMessage(event.data);\n      };\n    });\n  }\n  connected(): boolean {\n    return this._socket != null && this._socket.readyState === WebSocket.OPEN;\n  }\n  private _decodeMessage(data: ArrayBuffer) {\n    let descriptor = new DataView(data, 0, 1).getUint8(0);\n    switch (descriptor) {\n      case 3:\n        let stateFormatView = new DataView(data, 1, data.byteLength - 1);\n        this._decodeStateFormat(stateFormatView);\n        break;\n      case 4:\n        let supplement = new DataView(data, 1, 2).getUint8(0);\n        switch (supplement) {\n          case 1:\n            let genericSignalView = new DataView(data, 2, data.byteLength - 2);\n            this._decodeGenericSignal(genericSignalView);\n            break;\n          case 3:\n            let signalPropertyView = new DataView(data, 2, data.byteLength - 2);\n            this._decodeSignalProperties(signalPropertyView);\n            break;\n          default:\n            console.error(\"Unsupported Supplement: \" + supplement.toString());\n            break;\n        }\n        this.onReceiveBlock();\n        break;\n      case 5:\n        let stateVectorView = new DataView(data, 1, data.byteLength - 1);\n        this._decodeStateVector(stateVectorView);\n        break;\n      default:\n        console.error(\"Unsupported Descriptor: \" + descriptor.toString());\n        break;\n    }\n  }\n  private _decodePhysicalUnits(unitstr: string) {\n    let units: any;\n    units = {};\n    let unit = unitstr.split(\" \");\n    let idx = 0;\n    units.offset = Number(unit[idx++]);\n    units.gain = Number(unit[idx++]);\n    units.symbol = unit[idx++];\n    units.vmin = Number(unit[idx++]);\n    units.vmax = Number(unit[idx++]);\n    return units;\n  }\n  private _decodeSignalProperties(data: DataView) {\n    let propstr = this.getNullTermString(data);\n    // Bugfix: There seems to not always be spaces after '{' characters\n    propstr = propstr.replace(/{/g, \" { \");\n    propstr = propstr.replace(/}/g, \" } \");\n    this.signalProperties = {};\n    let prop_tokens = propstr.split(\" \");\n    let props = [];\n    for (let i = 0; i < prop_tokens.length; i++) {\n      if (prop_tokens[i].trim() === \"\") continue;\n      props.push(prop_tokens[i]);\n    }\n    let pidx = 0;\n    this.signalProperties.name = props[pidx++];\n    this.signalProperties.channels = [];\n    if (props[pidx] === \"{\") {\n      while (props[++pidx] !== \"}\")\n        this.signalProperties.channels.push(props[pidx]);\n      pidx++; // }\n    } else {\n      let numChannels = parseInt(props[pidx++]);\n      for (let i = 0; i < numChannels; i++)\n        this.signalProperties.channels.push((i + 1).toString());\n    }\n    this.signalProperties.elements = [];\n    if (props[pidx] === \"{\") {\n      while (props[++pidx] !== \"}\")\n        this.signalProperties.elements.push(props[pidx]);\n      pidx++; // }\n    } else {\n      let numElements = parseInt(props[pidx++]);\n      for (let i = 0; i < numElements; i++)\n        this.signalProperties.elements.push((i + 1).toString());\n    }\n    // Backward Compatibility\n    this.signalProperties.numelements = this.signalProperties.elements.length;\n    this.signalProperties.signaltype = props[pidx++];\n    this.signalProperties.channelunit = this._decodePhysicalUnits(\n      props.slice(pidx, (pidx += 5)).join(\" \")\n    );\n    this.signalProperties.elementunit = this._decodePhysicalUnits(\n      props.slice(pidx, (pidx += 5)).join(\" \")\n    );\n    pidx++; // '{'\n    this.signalProperties.valueunits = [];\n    for (let i = 0; i < this.signalProperties.channels.length; i++)\n      this.signalProperties.valueunits.push(\n        this._decodePhysicalUnits(props.slice(pidx, (pidx += 5)).join(\" \"))\n      );\n    pidx++; // '}'\n    this.onSignalProperties(this.signalProperties);\n  }\n  private _decodeStateFormat(data: DataView) {\n    this.stateFormat = {};\n    let formatStr = this.getNullTermString(data);\n    let lines = formatStr.split(\"\\n\");\n    for (let lineIdx = 0; lineIdx < lines.length; lineIdx++) {\n      if (lines[lineIdx].trim().length === 0) continue;\n      let stateline = lines[lineIdx].split(\" \");\n      let name = stateline[0];\n      this.stateFormat[name] = {};\n      this.stateFormat[name].bitWidth = parseInt(stateline[1]);\n      this.stateFormat[name].defaultValue = parseInt(stateline[2]);\n      this.stateFormat[name].byteLocation = parseInt(stateline[3]);\n      this.stateFormat[name].bitLocation = parseInt(stateline[4]);\n    }\n    let vecOrder = [];\n    for (let state in this.stateFormat) {\n      let loc = this.stateFormat[state].byteLocation * 8;\n      loc += this.stateFormat[state].bitLocation;\n      vecOrder.push([state, loc]);\n    }\n    // Sort by bit location\n    vecOrder.sort((a, b) => (a[1] < b[1] ? -1 : a[1] > b[1] ? 1 : 0));\n    // Create a list of ( state, bitwidth ) for decoding state vectors\n    this.stateVecOrder = [];\n    for (let i = 0; i < vecOrder.length; i++) {\n      let state = vecOrder[i][0];\n      this.stateVecOrder.push([state, this.stateFormat[state].bitWidth]);\n    }\n    this.onStateFormat(this.stateFormat);\n  }\n  private _decodeGenericSignal(data: DataView) {\n    let index = 0;\n    let signalType = data.getUint8(index);\n    index = index + 1;\n    let nChannels = data.getUint16(index, true);\n    index = index + 2;\n    let nElements = data.getUint16(index, true);\n    index = index + 2;\n    index = index + data.byteOffset;\n    let signalData = new DataView(data.buffer, index);\n    let signal = [];\n    for (let ch = 0; ch < nChannels; ++ch) {\n      signal.push([]);\n      for (let el = 0; el < nElements; ++el) {\n        switch (signalType) {\n          case this.SignalType.INT16:\n            signal[ch].push(\n              signalData.getInt16((nElements * ch + el) * 2, true)\n            );\n            break;\n          case this.SignalType.FLOAT32:\n            signal[ch].push(\n              signalData.getFloat32((nElements * ch + el) * 4, true)\n            );\n            break;\n          case this.SignalType.INT32:\n            signal[ch].push(\n              signalData.getInt32((nElements * ch + el) * 4, true)\n            );\n            break;\n          case this.SignalType.FLOAT24:\n            // TODO: Currently Unsupported\n            signal[ch].push(0.0);\n            break;\n          default:\n            break;\n        }\n      }\n    }\n    this.signal = signal;\n    this.onGenericSignal(signal);\n  }\n  private _decodeStateVector(dv: DataView) {\n    if (this.stateVecOrder == null) return;\n    // Currently, states are maximum 32 bit unsigned integers\n    // BitLocation 0 refers to the least significant bit of a byte in the packet\n    // ByteLocation 0 refers to the first byte in the sequence.\n    // Bits must be populated in increasing significance\n    let i8Array = new Int8Array(dv.buffer);\n    let firstZero = i8Array.indexOf(0);\n    let secondZero = i8Array.indexOf(0, firstZero + 1);\n    let decoder = new TextDecoder();\n    let stateVectorLength = parseInt(\n      decoder.decode(i8Array.slice(1, firstZero))\n    );\n    let numVectors = parseInt(\n      decoder.decode(i8Array.slice(firstZero + 1, secondZero))\n    );\n    let index = secondZero + 1;\n    let data = new DataView(dv.buffer, index);\n    let states = {};\n    for (let state in this.stateFormat) {\n      states[state] = Array(numVectors).fill(\n        this.stateFormat[state].defaultValue\n      );\n    }\n    for (let vecIdx = 0; vecIdx < numVectors; vecIdx++) {\n      let vec = new Uint8Array(\n        data.buffer,\n        data.byteOffset + vecIdx * stateVectorLength,\n        stateVectorLength\n      );\n      let bits = [];\n      for (let byteIdx = 0; byteIdx < vec.length; byteIdx++) {\n        bits.push((vec[byteIdx] & 0x01) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x02) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x04) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x08) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x10) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x20) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x40) !== 0 ? 1 : 0);\n        bits.push((vec[byteIdx] & 0x80) !== 0 ? 1 : 0);\n      }\n      for (let stateIdx = 0; stateIdx < this.stateVecOrder.length; stateIdx++) {\n        let fmt = this.stateFormat[this.stateVecOrder[stateIdx][0]];\n        let offset = fmt.byteLocation * 8 + fmt.bitLocation;\n        let val = 0;\n        let mask = 0x01;\n        for (let bIdx = 0; bIdx < fmt.bitWidth; bIdx++) {\n          if (bits[offset + bIdx]) val = (val | mask) >>> 0;\n          mask = (mask << 1) >>> 0;\n        }\n        states[this.stateVecOrder[stateIdx][0]][vecIdx] = val;\n      }\n    }\n    this.onStateVector(states);\n    this.states = states;\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
